name: Build and Test Docker Images

on:
    workflow_call:
        inputs:
            dockerfile:
                description: "Dockerfile for the build"
                required: true
                type: string
            folder:
                description: "Folder containing the Dockerfile"
                required: true
                type: string
            image_name:
                description: "Name of the Docker image"
                required: true
                type: string
            service_port:
                description: "Service port to be exposed"
                required: true
                type: number
            docker_port:
                description: "Port inside the Docker container"
                required: true
                type: number

jobs:
    build-and-test:
        runs-on: ubuntu-latest
        steps:
            - name: Build Docker Image
              run: |
                  IMAGE_NAME=${{ matrix.image_name }}
                  FILE_PATH=${{ matrix.folder }}/${{ matrix.dockerfile }}
                  docker build -t $IMAGE_NAME -f $FILE_PATH ${{ matrix.folder }}

            - name: Run Docker Container
              run: |
                  IMAGE_NAME=${{ matrix.image_name }}
                  SERVICE_PORT=${{ matrix.service_port }}
                  DOCKER_PORT=${{ matrix.docker_port }}
                  docker run -d --name $IMAGE_NAME-container -p $SERVICE_PORT:$DOCKER_PORT $IMAGE_NAME

            - name: Wait for Service to Start
              run: |
                  for i in {1..10}; do
                    curl -s -o /dev/null -w "%{http_code}" http://localhost:${{ matrix.service_port }} && break || sleep 5;
                  done

            - name: Test Service Response
              run: |
                  response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:${{ matrix.service_port }})
                  if [ "$response" != "200" ]; then
                    echo "Expected HTTP 200 but got $response";
                    exit 1;
                  fi

            - name: Stop and Remove Container
              run: |
                  IMAGE_NAME=${{ matrix.image_name }}
                  docker stop $IMAGE_NAME-container
                  docker rm $IMAGE_NAME-container
